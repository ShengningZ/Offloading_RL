# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import project_data_pb2 as project__data__pb2


class BackgroundSubtractionServiceStub(object):
    """BackgroundSubtractionService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ApplyBackgroundSubtraction = channel.unary_unary(
                '/project_data.BackgroundSubtractionService/ApplyBackgroundSubtraction',
                request_serializer=project__data__pb2.Image.SerializeToString,
                response_deserializer=project__data__pb2.ForegroundMask.FromString,
                )


class BackgroundSubtractionServiceServicer(object):
    """BackgroundSubtractionService
    """

    def ApplyBackgroundSubtraction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackgroundSubtractionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ApplyBackgroundSubtraction': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyBackgroundSubtraction,
                    request_deserializer=project__data__pb2.Image.FromString,
                    response_serializer=project__data__pb2.ForegroundMask.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'project_data.BackgroundSubtractionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BackgroundSubtractionService(object):
    """BackgroundSubtractionService
    """

    @staticmethod
    def ApplyBackgroundSubtraction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project_data.BackgroundSubtractionService/ApplyBackgroundSubtraction',
            project__data__pb2.Image.SerializeToString,
            project__data__pb2.ForegroundMask.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ObjectDetectionServiceStub(object):
    """ObjectDetectionService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectObjects = channel.unary_unary(
                '/project_data.ObjectDetectionService/DetectObjects',
                request_serializer=project__data__pb2.Image.SerializeToString,
                response_deserializer=project__data__pb2.DetectionResult.FromString,
                )


class ObjectDetectionServiceServicer(object):
    """ObjectDetectionService
    """

    def DetectObjects(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ObjectDetectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectObjects': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectObjects,
                    request_deserializer=project__data__pb2.Image.FromString,
                    response_serializer=project__data__pb2.DetectionResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'project_data.ObjectDetectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ObjectDetectionService(object):
    """ObjectDetectionService
    """

    @staticmethod
    def DetectObjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project_data.ObjectDetectionService/DetectObjects',
            project__data__pb2.Image.SerializeToString,
            project__data__pb2.DetectionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FilteringServiceStub(object):
    """FilteringService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FilterDetectionsByMask = channel.unary_unary(
                '/project_data.FilteringService/FilterDetectionsByMask',
                request_serializer=project__data__pb2.FilteringRequest.SerializeToString,
                response_deserializer=project__data__pb2.DetectionResult.FromString,
                )


class FilteringServiceServicer(object):
    """FilteringService
    """

    def FilterDetectionsByMask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FilteringServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FilterDetectionsByMask': grpc.unary_unary_rpc_method_handler(
                    servicer.FilterDetectionsByMask,
                    request_deserializer=project__data__pb2.FilteringRequest.FromString,
                    response_serializer=project__data__pb2.DetectionResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'project_data.FilteringService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FilteringService(object):
    """FilteringService
    """

    @staticmethod
    def FilterDetectionsByMask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project_data.FilteringService/FilterDetectionsByMask',
            project__data__pb2.FilteringRequest.SerializeToString,
            project__data__pb2.DetectionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class KalmanFilterServiceStub(object):
    """KalmanFilterService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateState = channel.unary_unary(
                '/project_data.KalmanFilterService/UpdateState',
                request_serializer=project__data__pb2.KalmanFilterRequest.SerializeToString,
                response_deserializer=project__data__pb2.StateUpdate.FromString,
                )


class KalmanFilterServiceServicer(object):
    """KalmanFilterService
    """

    def UpdateState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KalmanFilterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateState': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateState,
                    request_deserializer=project__data__pb2.KalmanFilterRequest.FromString,
                    response_serializer=project__data__pb2.StateUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'project_data.KalmanFilterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KalmanFilterService(object):
    """KalmanFilterService
    """

    @staticmethod
    def UpdateState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project_data.KalmanFilterService/UpdateState',
            project__data__pb2.KalmanFilterRequest.SerializeToString,
            project__data__pb2.StateUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
